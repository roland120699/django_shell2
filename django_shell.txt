from django.db import models
from django.contrib.auth.models import User
from django.db.models import Sum


class Author(models.Model):
    authorUser = models.OneToOneField(User, on_delete=models.CASCADE)
    ratingAuthor = models.SmallIntegerField(default=0)

    def update_rating(self):
        postRat = self.post_set.aggregate(postRating=Sum('rating'))
        pRat = 0
        pRat += postRat.get('postRating')

        commentRat = self.authorUser.comment_set.aggregate(commentRating=Sum('rating'))
        cRat = 0
        cRat += commentRat.get('commentRating')

        self.ratingAuthor = pRat * 3 + cRat
        self.save()


class Category(models.Model):
    name = models.CharField(max_length=64, unique=True)

class Post(models.Model):
    author = models.ForeignKey(Author, on_delete=models.CASCADE)

    NEWS = 'NW'
    ARTICLE = 'AR'
    CATEGORY_CHOICES = (
        (NEWS, 'Новость'),
        (ARTICLE, 'Статья'),
    )
    categoryType = models.CharField(max_length=2, choices=CATEGORY_CHOICES, default=ARTICLE)
    dateCreation = models.DateTimeField(auto_now_add=True)
    postCategory = models.ManyToManyField(Category, through='PostCategory')
    title = models.CharField(max_length=128)
    text = models.TextField()
    rating = models.SmallIntegerField(default=0)

    def like(self):
        self.rating += 1
        self.save()

    def dislike(self):
        self.rating -= 1
        self.save()

    def preview(self):
        return self.text[0:123] + '...'

class PostCategory(models.Model):
    postThrough = models.ForeignKey(Post, on_delete=models.CASCADE)
    categoryThrough = models.ForeignKey(Category, on_delete=models.CASCADE)

class Comment(models.Model):
    commentPost = models.ForeignKey(Post, on_delete=models.CASCADE)
    commentUser = models.ForeignKey(User, on_delete=models.CASCADE)
    text = models.TextField()
    dateCreation = models.DateTimeField(auto_now_add=True)
    rating = models.SmallIntegerField(default=0)

    def like(self):
        self.rating += 1
        self.save()

    def dislike(self):
        self.rating -= 1
        self.save()



u1 = User.objects.create_user(username='Roland')
>>> u1
<User: Roland>
>>> u1 = User.objects.create_user(username='Bogdan') 
>>> u1
<User: Bogdan>
 Author.objects.create(authorUser=u1)
<Author: Author object (1)>
>>> Category.objects.create(name='IT')     
<Category: Category object (1)>
>>> author = Author.objects.get(id=1)
>>> author
<Author: Author object (1)>
>>> Post.objects.create(author=author, categoryType='NW', title='sometitle', text='somebigtext')
<Post: Post object (1)>
Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='anytextbyauthor')
<Comment: Comment object (1)>
>>> Comment.objects.get(id=1).like()
Comment.objects.get(id=1).rating 
1
>>> Comment.objects.get(id=1).dislike() 
>>> Comment.objects.get(id=1).dislike()
>>> Comment.objects.get(id=1).dislike()
>>> Comment.objects.get(id=1).rating 
-2
>>> Author.objects.get(id=1)
<Author: Author object (1)>
>>> a = Author.objects.get(id=1)
>>> a.update_rating()
>>> a.ratingAuthor
-2
>>> Post.objects.get(id=1).like()
>>> a.update_rating()
>>> a.ratingAuthor
1
>>> a = Author.objects.order_by('-ratingAuthor')[:1]
>>> a
<QuerySet [<Author: Author object (1)>]>
>>> c = User.objects.create_user(username='Bon')    
>>> Author.objects.create(authorUser=c)
<Author: Author object (2)>
>>> Author.objects.order_by('-ratingAuthor')[:1]
<QuerySet [<Author: Author object (1)>]>
>>> a = Author.objects.order_by('-ratingAuthor')
>>> a
<QuerySet [<Author: Author object (1)>, <Author: Author object (2)>]>
>>> a = Author.objects.order_by('-ratingAuthor')
>>> for i in a:
...     i.ratingAuthor
...     i.authorUser.username
...
1
'Rol'
0
'Bon'
